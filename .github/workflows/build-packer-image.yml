name: Build Packer Image

on:
  push:
    branches:
      - withoutDBPackerBuildTest

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16
        env:
          #          POSTGRES_URL: ${{ secrets.DB_URL }}
          POSTGRES_USER: ${{ secrets.DB_USERNAME }}    # Username from GitHub Secrets
          POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }} # Password from GitHub Secrets
          POSTGRES_DB: ${{ secrets.DB_NAME }}       # Database name from GitHub Secrets
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U DB_USERNAME"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout code
        uses: actions/checkout@v3

      # Installing Java JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: "temurin"

      # Configure Gradle for optimal use in GitHub Actions, including caching of downloaded dependencies.
      # See: https://github.com/gradle/actions/blob/main/setup-gradle/README.md
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582

      - name: UserRestControllerTest Testing
        env:
          DB_URL: ${{ secrets.DB_URL }}        # Database name from GitHub Secrets
          DB_USERNAME: ${{ secrets.DB_USERNAME }}    # Username from GitHub Secrets
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }} # Password from GitHub Secrets
        run: ./gradlew test

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
    
      # Build Spring boot project and remove old artifacts
      - name: Build project
        run: ./gradlew bootJar

      #Copy Jar file from local to workspace (ROOT.jar)
      - name: Rename and Move Jar File
        run: mv build/libs/webapp-0.0.1-SNAPSHOT.jar ROOT.jar

      # Setup Packer
      - name: Setup Packer
        uses: hashicorp/setup-packer@main
      # Initialise Packer
      - name: Packer init
        run: packer init ./webapp-main.pkr.hcl
      # Format packer files
      - name: Packer format
        run: packer fmt -check ./webapp-main.pkr.hcl
      # Validate Packer Files
      - name: Packer validate
        run: packer validate ./webapp-main.pkr.hcl
      - name: Packer Build
        run: |
          packer build \
            -var "aws_region=${{ secrets.AWS_REGION }}" \
            -var "vpc_id=${{ secrets.VPC_ID }}" \
            -var "source_ami=${{ secrets.SOURCE_AMI }}" \
            -var "ssh_username=ubuntu" \
            -var "subnet_id=${{ secrets.SUBNET_ID }}" \
            -var "jar_file=ROOT.jar" \
            ./webapp-main.pkr.hcl
      - name: Retrieve AMI ID
        id: get-ami-id
        run: |
          AMI_ID=$(aws ec2 describe-images --owners self --filters 'Name=name,Values=Swamy_Webapp-*' --query 'Images[0].ImageId' --output text)
          if [ "$AMI_ID" == "None" ]; then
            echo "Error: No AMI found matching the name pattern."
            exit 1
          fi
          echo "AMI_ID=$AMI_ID"
          echo "AMI_ID=$AMI_ID" >> $GITHUB_ENV
 
      - name: Share AMI with DEMO Account
        run: |
          aws ec2 modify-image-attribute --image-id ${{ env.AMI_ID }} --launch-permission "{\"Add\":[{\"UserId\":\"${{ secrets.DEMO_ACCOUNT_ID }}\"}]}"
